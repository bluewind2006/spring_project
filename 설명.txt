CustomCharacterEscapes.java
클래스 개요:
CustomCharacterEscapes 클래스는 Jackson의 CharacterEscapes 클래스를 확장하여, JSON 출력을 생성할 때 특정 문자를 이스케이프 처리하는 사용자 정의 이스케이프 규칙을 정의합니다. 이는 XSS 공격을 방지하기 위한 중요한 역할을 합니다.

주요 메소드:
CustomCharacterEscapes() 생성자

CustomCharacterEscapes 클래스의 생성자입니다. 표준 ASCII 이스케이프 코드를 가져와 특정 문자를 사용자 정의 이스케이프 코드로 설정합니다.
<, >, &, ', ", / 문자를 이스케이프 처리하도록 설정합니다.
getEscapeCodesForAscii()

Jackson이 ASCII 코드의 이스케이프 규칙을 요청할 때 호출됩니다.
이 메소드는 사용자 정의 이스케이프 규칙이 포함된 asciiEscapes 배열을 반환합니다.
getEscapeSequence(int ch)

특정 문자에 대한 이스케이프 시퀀스를 반환합니다.
예를 들어, < 문자는 \\u003C로 이스케이프 처리됩니다.
기본적으로 이스케이프되지 않은 문자는 \\u 형식으로 반환됩니다.
JacksonConfig.java
클래스 개요:
JacksonConfig 클래스는 Jackson ObjectMapper의 설정을 위한 Spring 구성 클래스입니다. 사용자 정의 이스케이프 규칙을 적용하는 CustomCharacterEscapes를 설정합니다.

주요 메소드:
objectMapper()
Spring 컨텍스트에서 사용할 ObjectMapper 빈을 정의합니다.
CustomCharacterEscapes를 설정하여 JSON 출력을 생성할 때 사용자 정의 이스케이프 규칙이 적용되도록 합니다.
빈으로 등록된 ObjectMapper는 자동으로 Spring 컨텍스트에서 주입되어 사용됩니다.
XSSFilterController.java
클래스 개요:
XSSFilterController 클래스는 HTTP 요청을 처리하는 Spring MVC 컨트롤러입니다. XSS 공격을 방지하기 위해 입력 값을 검증하고, JSON 출력을 생성합니다.

주요 메소드:
showForm()

GET 요청을 처리하고 form.html 템플릿을 반환합니다.
폼 페이지를 보여주는 역할을 합니다.
submitForm(@RequestParam(name = "input") String input, Model model)

POST 요청을 처리하고, 입력된 문자열을 검증합니다.
입력 값이 안전한지 XSSValidationUtils를 통해 검증하고, 안전한 경우 result.html 템플릿을 반환합니다.
입력 값이 유효하지 않은 경우 XSSServletException을 발생시킵니다.
submitJson(@RequestBody Map<String, Object> jsonInput)

POST 요청을 처리하고, JSON 입력 값을 검증합니다.
JSON 입력 값의 각 키와 값을 XSSValidationUtils를 통해 검증하고, 안전한 경우 JSON 응답을 반환합니다.
입력 값이 유효하지 않은 경우 XSSServletException을 발생시킵니다.
XSSValidationUtils.java
클래스 개요:
XSSValidationUtils 클래스는 입력 값을 검증하고 XSS 공격을 방지하기 위한 유틸리티 메소드를 제공합니다.

주요 메소드:
isValidURL(String url)

URL이 유효한지 검사합니다.
URL을 '/'로 분리한 각 세그먼트가 유효한 문자로만 구성되었는지 확인합니다.
isValidRequestParam(String param)

쿼리 파라미터가 유효한지 검사합니다.
쿼리 파라미터를 '&'로 분리한 각 세그먼트가 유효한지 확인합니다.
isValidURLPattern(String input)

JSON 문자열이 유효한지 검사합니다.
JSON 문자열을 맵으로 변환한 후 각 키-값 쌍이 유효한지 확인합니다.
isSafeString(String input)

입력 문자열이 안전한지 검사합니다.
입력 값이 XSS 패턴을 포함하지 않도록 검사하고, Base64 및 URL 인코딩 문자열을 디코딩하여 추가 검사를 수행합니다.
containsXSS(String input)

문자열이 XSS 패턴을 포함하는지 검사합니다.
<script>, src=, eval() 등의 패턴을 검사하여 XSS 공격을 탐지합니다.
isBase64Encoded(String input)

문자열이 Base64 인코딩되었는지 검사합니다.
문자열이 Base64 인코딩 패턴과 일치하는지 확인합니다.
isURLEncoded(String input)

문자열이 URL 인코딩되었는지 검사합니다.
문자열이 URL 인코딩 패턴과 일치하는지 확인합니다.
템플릿 파일 설명
result.html

역할:
폼에서 입력된 데이터를 출력하는 페이지입니다.
input 모델 속성을 사용하여 입력 데이터를 화면에 표시합니다.
JSON 데이터를 안전하게 파싱하여 JavaScript 변수로 사용합니다.
html
코드 복사
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Result</title>
    <script th:inline="javascript">
        /*<![CDATA[*/
        let inputData = /*[[${input}]]*/ {};
        let safeData = JSON.parse(inputData);
        /*]]>*/
    </script>
</head>
<body>
    <p>Submitted Input: <span th:text="${input}"></span></p>
</body>
</html>
error.html

역할:
예외가 발생했을 때 오류 메시지를 출력하는 페이지입니다.
message 모델 속성을 사용하여 오류 메시지를 화면에 표시합니다.
html
코드 복사
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Error</title>
</head>
<body>
    <p>Error: <span th:text="${message}"></span></p>
</body>
</html>
이와 같은 구성으로 XSS 공격을 방어할 수 있으며, JSON 출력과 입력 검증을 통해 애플리케이션의 보안을 강화할 수 있습니다.






